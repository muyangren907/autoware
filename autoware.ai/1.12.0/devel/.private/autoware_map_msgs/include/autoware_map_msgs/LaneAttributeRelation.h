// Generated by gencpp from file autoware_map_msgs/LaneAttributeRelation.msg
// DO NOT EDIT!


#ifndef AUTOWARE_MAP_MSGS_MESSAGE_LANEATTRIBUTERELATION_H
#define AUTOWARE_MAP_MSGS_MESSAGE_LANEATTRIBUTERELATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autoware_map_msgs
{
template <class ContainerAllocator>
struct LaneAttributeRelation_
{
  typedef LaneAttributeRelation_<ContainerAllocator> Type;

  LaneAttributeRelation_()
    : lane_id(0)
    , attribute_type(0)
    , area_id(0)  {
    }
  LaneAttributeRelation_(const ContainerAllocator& _alloc)
    : lane_id(0)
    , attribute_type(0)
    , area_id(0)  {
  (void)_alloc;
    }



   typedef int32_t _lane_id_type;
  _lane_id_type lane_id;

   typedef int32_t _attribute_type_type;
  _attribute_type_type attribute_type;

   typedef int32_t _area_id_type;
  _area_id_type area_id;



  enum {
    PLANE = 1u,
    INTERSECTION = 2u,
    CROSS_WALK = 3u,
    DISABLE_LANE_CHANGE = 4u,
    DISABLE_PARKING = 5u,
    RAILROAD = 6u,
    PEDESTRIAN_SPACE = 7u,
    PARKING_AREA = 8u,
  };


  typedef boost::shared_ptr< ::autoware_map_msgs::LaneAttributeRelation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_map_msgs::LaneAttributeRelation_<ContainerAllocator> const> ConstPtr;

}; // struct LaneAttributeRelation_

typedef ::autoware_map_msgs::LaneAttributeRelation_<std::allocator<void> > LaneAttributeRelation;

typedef boost::shared_ptr< ::autoware_map_msgs::LaneAttributeRelation > LaneAttributeRelationPtr;
typedef boost::shared_ptr< ::autoware_map_msgs::LaneAttributeRelation const> LaneAttributeRelationConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_map_msgs::LaneAttributeRelation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_map_msgs::LaneAttributeRelation_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace autoware_map_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'autoware_map_msgs': ['/home/myr907/autoware.ai/src/autoware/messages/autoware_map_msgs/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::autoware_map_msgs::LaneAttributeRelation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_map_msgs::LaneAttributeRelation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_map_msgs::LaneAttributeRelation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_map_msgs::LaneAttributeRelation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_map_msgs::LaneAttributeRelation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_map_msgs::LaneAttributeRelation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_map_msgs::LaneAttributeRelation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e65c2a2db848427c6061a3bc2aff585f";
  }

  static const char* value(const ::autoware_map_msgs::LaneAttributeRelation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe65c2a2db848427cULL;
  static const uint64_t static_value2 = 0x6061a3bc2aff585fULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_map_msgs::LaneAttributeRelation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_map_msgs/LaneAttributeRelation";
  }

  static const char* value(const ::autoware_map_msgs::LaneAttributeRelation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_map_msgs::LaneAttributeRelation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This describes an attribute of lane in a map.\n"
"\n"
"# ATTRIBUTE_TYPES\n"
"uint32 PLANE = 1\n"
"uint32 INTERSECTION = 2\n"
"uint32 CROSS_WALK = 3\n"
"uint32 DISABLE_LANE_CHANGE = 4\n"
"uint32 DISABLE_PARKING = 5\n"
"uint32 RAILROAD = 6\n"
"uint32 PEDESTRIAN_SPACE = 7\n"
"uint32 PARKING_AREA = 8\n"
"\n"
"# Id of Lane object which attribute is applied.\n"
"int32 lane_id\n"
"\n"
"# Attribute that is applied to lane\n"
"# Must be one of ATTRIBUTE_TYPES\n"
"int32 attribute_type\n"
"\n"
"# Id of Area object that is relevant to the attribute (if exists). \n"
"# e.g. Id of Area object that describes crosswalk when attribute_type = CROSS_WALK. \n"
"int32 area_id\n"
;
  }

  static const char* value(const ::autoware_map_msgs::LaneAttributeRelation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_map_msgs::LaneAttributeRelation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lane_id);
      stream.next(m.attribute_type);
      stream.next(m.area_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaneAttributeRelation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_map_msgs::LaneAttributeRelation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_map_msgs::LaneAttributeRelation_<ContainerAllocator>& v)
  {
    s << indent << "lane_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lane_id);
    s << indent << "attribute_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.attribute_type);
    s << indent << "area_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.area_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_MAP_MSGS_MESSAGE_LANEATTRIBUTERELATION_H
