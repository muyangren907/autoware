# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds4_msgs/DS4.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class DS4(genpy.Message):
  _md5sum = "9c17d8a8df3d9463ab329c13d2358031"
  _type = "ds4_msgs/DS4"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

bool square
bool cross
bool circle
bool triangle

bool up
bool right
bool down
bool left

bool l1
bool r1
float64 l2
float64 r2
bool l3
bool r3

float64 left_x
float64 left_y
float64 right_x
float64 right_y

bool share
bool option
bool ps
bool touchpad

float64 acc_x
float64 acc_y
float64 acc_z

float64 gyro_rol
float64 gyro_pit
float64 gyro_yaw

bool connected

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','square','cross','circle','triangle','up','right','down','left','l1','r1','l2','r2','l3','r3','left_x','left_y','right_x','right_y','share','option','ps','touchpad','acc_x','acc_y','acc_z','gyro_rol','gyro_pit','gyro_yaw','connected']
  _slot_types = ['std_msgs/Header','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','float64','float64','bool','bool','float64','float64','float64','float64','bool','bool','bool','bool','float64','float64','float64','float64','float64','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,square,cross,circle,triangle,up,right,down,left,l1,r1,l2,r2,l3,r3,left_x,left_y,right_x,right_y,share,option,ps,touchpad,acc_x,acc_y,acc_z,gyro_rol,gyro_pit,gyro_yaw,connected

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DS4, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.square is None:
        self.square = False
      if self.cross is None:
        self.cross = False
      if self.circle is None:
        self.circle = False
      if self.triangle is None:
        self.triangle = False
      if self.up is None:
        self.up = False
      if self.right is None:
        self.right = False
      if self.down is None:
        self.down = False
      if self.left is None:
        self.left = False
      if self.l1 is None:
        self.l1 = False
      if self.r1 is None:
        self.r1 = False
      if self.l2 is None:
        self.l2 = 0.
      if self.r2 is None:
        self.r2 = 0.
      if self.l3 is None:
        self.l3 = False
      if self.r3 is None:
        self.r3 = False
      if self.left_x is None:
        self.left_x = 0.
      if self.left_y is None:
        self.left_y = 0.
      if self.right_x is None:
        self.right_x = 0.
      if self.right_y is None:
        self.right_y = 0.
      if self.share is None:
        self.share = False
      if self.option is None:
        self.option = False
      if self.ps is None:
        self.ps = False
      if self.touchpad is None:
        self.touchpad = False
      if self.acc_x is None:
        self.acc_x = 0.
      if self.acc_y is None:
        self.acc_y = 0.
      if self.acc_z is None:
        self.acc_z = 0.
      if self.gyro_rol is None:
        self.gyro_rol = 0.
      if self.gyro_pit is None:
        self.gyro_pit = 0.
      if self.gyro_yaw is None:
        self.gyro_yaw = 0.
      if self.connected is None:
        self.connected = False
    else:
      self.header = std_msgs.msg.Header()
      self.square = False
      self.cross = False
      self.circle = False
      self.triangle = False
      self.up = False
      self.right = False
      self.down = False
      self.left = False
      self.l1 = False
      self.r1 = False
      self.l2 = 0.
      self.r2 = 0.
      self.l3 = False
      self.r3 = False
      self.left_x = 0.
      self.left_y = 0.
      self.right_x = 0.
      self.right_y = 0.
      self.share = False
      self.option = False
      self.ps = False
      self.touchpad = False
      self.acc_x = 0.
      self.acc_y = 0.
      self.acc_z = 0.
      self.gyro_rol = 0.
      self.gyro_pit = 0.
      self.gyro_yaw = 0.
      self.connected = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_10B2d2B4d4B6dB().pack(_x.square, _x.cross, _x.circle, _x.triangle, _x.up, _x.right, _x.down, _x.left, _x.l1, _x.r1, _x.l2, _x.r2, _x.l3, _x.r3, _x.left_x, _x.left_y, _x.right_x, _x.right_y, _x.share, _x.option, _x.ps, _x.touchpad, _x.acc_x, _x.acc_y, _x.acc_z, _x.gyro_rol, _x.gyro_pit, _x.gyro_yaw, _x.connected))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 113
      (_x.square, _x.cross, _x.circle, _x.triangle, _x.up, _x.right, _x.down, _x.left, _x.l1, _x.r1, _x.l2, _x.r2, _x.l3, _x.r3, _x.left_x, _x.left_y, _x.right_x, _x.right_y, _x.share, _x.option, _x.ps, _x.touchpad, _x.acc_x, _x.acc_y, _x.acc_z, _x.gyro_rol, _x.gyro_pit, _x.gyro_yaw, _x.connected,) = _get_struct_10B2d2B4d4B6dB().unpack(str[start:end])
      self.square = bool(self.square)
      self.cross = bool(self.cross)
      self.circle = bool(self.circle)
      self.triangle = bool(self.triangle)
      self.up = bool(self.up)
      self.right = bool(self.right)
      self.down = bool(self.down)
      self.left = bool(self.left)
      self.l1 = bool(self.l1)
      self.r1 = bool(self.r1)
      self.l3 = bool(self.l3)
      self.r3 = bool(self.r3)
      self.share = bool(self.share)
      self.option = bool(self.option)
      self.ps = bool(self.ps)
      self.touchpad = bool(self.touchpad)
      self.connected = bool(self.connected)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_10B2d2B4d4B6dB().pack(_x.square, _x.cross, _x.circle, _x.triangle, _x.up, _x.right, _x.down, _x.left, _x.l1, _x.r1, _x.l2, _x.r2, _x.l3, _x.r3, _x.left_x, _x.left_y, _x.right_x, _x.right_y, _x.share, _x.option, _x.ps, _x.touchpad, _x.acc_x, _x.acc_y, _x.acc_z, _x.gyro_rol, _x.gyro_pit, _x.gyro_yaw, _x.connected))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 113
      (_x.square, _x.cross, _x.circle, _x.triangle, _x.up, _x.right, _x.down, _x.left, _x.l1, _x.r1, _x.l2, _x.r2, _x.l3, _x.r3, _x.left_x, _x.left_y, _x.right_x, _x.right_y, _x.share, _x.option, _x.ps, _x.touchpad, _x.acc_x, _x.acc_y, _x.acc_z, _x.gyro_rol, _x.gyro_pit, _x.gyro_yaw, _x.connected,) = _get_struct_10B2d2B4d4B6dB().unpack(str[start:end])
      self.square = bool(self.square)
      self.cross = bool(self.cross)
      self.circle = bool(self.circle)
      self.triangle = bool(self.triangle)
      self.up = bool(self.up)
      self.right = bool(self.right)
      self.down = bool(self.down)
      self.left = bool(self.left)
      self.l1 = bool(self.l1)
      self.r1 = bool(self.r1)
      self.l3 = bool(self.l3)
      self.r3 = bool(self.r3)
      self.share = bool(self.share)
      self.option = bool(self.option)
      self.ps = bool(self.ps)
      self.touchpad = bool(self.touchpad)
      self.connected = bool(self.connected)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_10B2d2B4d4B6dB = None
def _get_struct_10B2d2B4d4B6dB():
    global _struct_10B2d2B4d4B6dB
    if _struct_10B2d2B4d4B6dB is None:
        _struct_10B2d2B4d4B6dB = struct.Struct("<10B2d2B4d4B6dB")
    return _struct_10B2d2B4d4B6dB
