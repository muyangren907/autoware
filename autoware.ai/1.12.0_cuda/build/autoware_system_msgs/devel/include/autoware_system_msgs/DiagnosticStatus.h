// Generated by gencpp from file autoware_system_msgs/DiagnosticStatus.msg
// DO NOT EDIT!


#ifndef AUTOWARE_SYSTEM_MSGS_MESSAGE_DIAGNOSTICSTATUS_H
#define AUTOWARE_SYSTEM_MSGS_MESSAGE_DIAGNOSTICSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace autoware_system_msgs
{
template <class ContainerAllocator>
struct DiagnosticStatus_
{
  typedef DiagnosticStatus_<ContainerAllocator> Type;

  DiagnosticStatus_()
    : header()
    , key()
    , value()
    , description()
    , type(0)
    , level(0)  {
    }
  DiagnosticStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , key(_alloc)
    , value(_alloc)
    , description(_alloc)
    , type(0)
    , level(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _key_type;
  _key_type key;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _value_type;
  _value_type value;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _description_type;
  _description_type description;

   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _level_type;
  _level_type level;



  enum {
    UNDEFINED = 0u,
    OUT_OF_RANGE = 1u,
    RATE_IS_SLOW = 2u,
    HARDWARE = 255u,
    OK = 1u,
    WARN = 2u,
    ERROR = 3u,
    FATAL = 4u,
  };


  typedef boost::shared_ptr< ::autoware_system_msgs::DiagnosticStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_system_msgs::DiagnosticStatus_<ContainerAllocator> const> ConstPtr;

}; // struct DiagnosticStatus_

typedef ::autoware_system_msgs::DiagnosticStatus_<std::allocator<void> > DiagnosticStatus;

typedef boost::shared_ptr< ::autoware_system_msgs::DiagnosticStatus > DiagnosticStatusPtr;
typedef boost::shared_ptr< ::autoware_system_msgs::DiagnosticStatus const> DiagnosticStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_system_msgs::DiagnosticStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_system_msgs::DiagnosticStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace autoware_system_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'rosgraph_msgs': ['/opt/ros/melodic/share/rosgraph_msgs/cmake/../msg'], 'autoware_system_msgs': ['/home/muyangren907/autoware/autoware.ai/1.12.0_cuda/src/autoware/messages/autoware_system_msgs/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::autoware_system_msgs::DiagnosticStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_system_msgs::DiagnosticStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_system_msgs::DiagnosticStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_system_msgs::DiagnosticStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_system_msgs::DiagnosticStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_system_msgs::DiagnosticStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_system_msgs::DiagnosticStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6c3db7fb4a3aac47a2b0c51e9b4e3539";
  }

  static const char* value(const ::autoware_system_msgs::DiagnosticStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6c3db7fb4a3aac47ULL;
  static const uint64_t static_value2 = 0xa2b0c51e9b4e3539ULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_system_msgs::DiagnosticStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_system_msgs/DiagnosticStatus";
  }

  static const char* value(const ::autoware_system_msgs::DiagnosticStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_system_msgs::DiagnosticStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"string key\n"
"\n"
"string value\n"
"\n"
"string description\n"
"\n"
"uint8 UNDEFINED = 0\n"
"\n"
"uint8 type\n"
"uint8 OUT_OF_RANGE = 1\n"
"uint8 RATE_IS_SLOW = 2\n"
"uint8 HARDWARE = 255\n"
"\n"
"uint8 level\n"
"uint8 OK = 1\n"
"uint8 WARN = 2\n"
"uint8 ERROR = 3\n"
"uint8 FATAL = 4\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::autoware_system_msgs::DiagnosticStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_system_msgs::DiagnosticStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.key);
      stream.next(m.value);
      stream.next(m.description);
      stream.next(m.type);
      stream.next(m.level);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DiagnosticStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_system_msgs::DiagnosticStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_system_msgs::DiagnosticStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "key: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.key);
    s << indent << "value: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.value);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.description);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.level);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_SYSTEM_MSGS_MESSAGE_DIAGNOSTICSTATUS_H
