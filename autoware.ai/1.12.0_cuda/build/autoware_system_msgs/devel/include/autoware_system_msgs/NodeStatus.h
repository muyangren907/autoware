// Generated by gencpp from file autoware_system_msgs/NodeStatus.msg
// DO NOT EDIT!


#ifndef AUTOWARE_SYSTEM_MSGS_MESSAGE_NODESTATUS_H
#define AUTOWARE_SYSTEM_MSGS_MESSAGE_NODESTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <autoware_system_msgs/DiagnosticStatusArray.h>

namespace autoware_system_msgs
{
template <class ContainerAllocator>
struct NodeStatus_
{
  typedef NodeStatus_<ContainerAllocator> Type;

  NodeStatus_()
    : header()
    , node_name()
    , node_activated(false)
    , status()  {
    }
  NodeStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , node_name(_alloc)
    , node_activated(false)
    , status(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _node_name_type;
  _node_name_type node_name;

   typedef uint8_t _node_activated_type;
  _node_activated_type node_activated;

   typedef std::vector< ::autoware_system_msgs::DiagnosticStatusArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::autoware_system_msgs::DiagnosticStatusArray_<ContainerAllocator> >::other >  _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::autoware_system_msgs::NodeStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_system_msgs::NodeStatus_<ContainerAllocator> const> ConstPtr;

}; // struct NodeStatus_

typedef ::autoware_system_msgs::NodeStatus_<std::allocator<void> > NodeStatus;

typedef boost::shared_ptr< ::autoware_system_msgs::NodeStatus > NodeStatusPtr;
typedef boost::shared_ptr< ::autoware_system_msgs::NodeStatus const> NodeStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_system_msgs::NodeStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_system_msgs::NodeStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace autoware_system_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'rosgraph_msgs': ['/opt/ros/melodic/share/rosgraph_msgs/cmake/../msg'], 'autoware_system_msgs': ['/home/muyangren907/autoware/autoware.ai/1.12.0_cuda/src/autoware/messages/autoware_system_msgs/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::autoware_system_msgs::NodeStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_system_msgs::NodeStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_system_msgs::NodeStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_system_msgs::NodeStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_system_msgs::NodeStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_system_msgs::NodeStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_system_msgs::NodeStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "43e5a8f8ce6c88feffeaea7f4a97abd5";
  }

  static const char* value(const ::autoware_system_msgs::NodeStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x43e5a8f8ce6c88feULL;
  static const uint64_t static_value2 = 0xffeaea7f4a97abd5ULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_system_msgs::NodeStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_system_msgs/NodeStatus";
  }

  static const char* value(const ::autoware_system_msgs::NodeStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_system_msgs::NodeStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string node_name\n"
"bool node_activated\n"
"autoware_system_msgs/DiagnosticStatusArray[] status\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: autoware_system_msgs/DiagnosticStatusArray\n"
"autoware_system_msgs/DiagnosticStatus[] status\n"
"================================================================================\n"
"MSG: autoware_system_msgs/DiagnosticStatus\n"
"Header header\n"
"\n"
"string key\n"
"\n"
"string value\n"
"\n"
"string description\n"
"\n"
"uint8 UNDEFINED = 0\n"
"\n"
"uint8 type\n"
"uint8 OUT_OF_RANGE = 1\n"
"uint8 RATE_IS_SLOW = 2\n"
"uint8 HARDWARE = 255\n"
"\n"
"uint8 level\n"
"uint8 OK = 1\n"
"uint8 WARN = 2\n"
"uint8 ERROR = 3\n"
"uint8 FATAL = 4\n"
;
  }

  static const char* value(const ::autoware_system_msgs::NodeStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_system_msgs::NodeStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.node_name);
      stream.next(m.node_activated);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NodeStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_system_msgs::NodeStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_system_msgs::NodeStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "node_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.node_name);
    s << indent << "node_activated: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.node_activated);
    s << indent << "status[]" << std::endl;
    for (size_t i = 0; i < v.status.size(); ++i)
    {
      s << indent << "  status[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::autoware_system_msgs::DiagnosticStatusArray_<ContainerAllocator> >::stream(s, indent + "    ", v.status[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_SYSTEM_MSGS_MESSAGE_NODESTATUS_H
