// Generated by gencpp from file vector_map_server/GetRoadMarkResponse.msg
// DO NOT EDIT!


#ifndef VECTOR_MAP_SERVER_MESSAGE_GETROADMARKRESPONSE_H
#define VECTOR_MAP_SERVER_MESSAGE_GETROADMARKRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <vector_map_msgs/RoadMarkArray.h>

namespace vector_map_server
{
template <class ContainerAllocator>
struct GetRoadMarkResponse_
{
  typedef GetRoadMarkResponse_<ContainerAllocator> Type;

  GetRoadMarkResponse_()
    : objects()  {
    }
  GetRoadMarkResponse_(const ContainerAllocator& _alloc)
    : objects(_alloc)  {
  (void)_alloc;
    }



   typedef  ::vector_map_msgs::RoadMarkArray_<ContainerAllocator>  _objects_type;
  _objects_type objects;





  typedef boost::shared_ptr< ::vector_map_server::GetRoadMarkResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vector_map_server::GetRoadMarkResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetRoadMarkResponse_

typedef ::vector_map_server::GetRoadMarkResponse_<std::allocator<void> > GetRoadMarkResponse;

typedef boost::shared_ptr< ::vector_map_server::GetRoadMarkResponse > GetRoadMarkResponsePtr;
typedef boost::shared_ptr< ::vector_map_server::GetRoadMarkResponse const> GetRoadMarkResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vector_map_server::GetRoadMarkResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vector_map_server::GetRoadMarkResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vector_map_server

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'pcl_msgs': ['/opt/ros/melodic/share/pcl_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'vector_map_msgs': ['/home/muyangren907/autoware/autoware.ai/1.12.0_cuda/install/vector_map_msgs/share/vector_map_msgs/cmake/../msg'], 'jsk_footstep_msgs': ['/opt/ros/melodic/share/jsk_footstep_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'jsk_recognition_msgs': ['/opt/ros/melodic/share/jsk_recognition_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg'], 'autoware_msgs': ['/home/muyangren907/autoware/autoware.ai/1.12.0_cuda/install/autoware_msgs/share/autoware_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vector_map_server::GetRoadMarkResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vector_map_server::GetRoadMarkResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vector_map_server::GetRoadMarkResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vector_map_server::GetRoadMarkResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vector_map_server::GetRoadMarkResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vector_map_server::GetRoadMarkResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vector_map_server::GetRoadMarkResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "940ffa72a3b35e28520d814d5291ea3f";
  }

  static const char* value(const ::vector_map_server::GetRoadMarkResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x940ffa72a3b35e28ULL;
  static const uint64_t static_value2 = 0x520d814d5291ea3fULL;
};

template<class ContainerAllocator>
struct DataType< ::vector_map_server::GetRoadMarkResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vector_map_server/GetRoadMarkResponse";
  }

  static const char* value(const ::vector_map_server::GetRoadMarkResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vector_map_server::GetRoadMarkResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vector_map_msgs/RoadMarkArray objects\n"
"\n"
"\n"
"================================================================================\n"
"MSG: vector_map_msgs/RoadMarkArray\n"
"Header header\n"
"RoadMark[] data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: vector_map_msgs/RoadMark\n"
"# type\n"
"uint8 MARK=1\n"
"uint8 ARROW=2\n"
"uint8 CHARACTER=3\n"
"uint8 SIGN=4\n"
"\n"
"# Ver 1.00\n"
"int32 id\n"
"int32 aid\n"
"int32 type # differ from specification\n"
"int32 linkid\n"
;
  }

  static const char* value(const ::vector_map_server::GetRoadMarkResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vector_map_server::GetRoadMarkResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.objects);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetRoadMarkResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vector_map_server::GetRoadMarkResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vector_map_server::GetRoadMarkResponse_<ContainerAllocator>& v)
  {
    s << indent << "objects: ";
    s << std::endl;
    Printer< ::vector_map_msgs::RoadMarkArray_<ContainerAllocator> >::stream(s, indent + "  ", v.objects);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VECTOR_MAP_SERVER_MESSAGE_GETROADMARKRESPONSE_H
